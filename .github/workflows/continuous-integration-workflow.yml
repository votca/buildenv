name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron:  '0 1 * * FRI'

concurrency:
  group: ${ {github.event_name }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{github.event_name == 'pull_request'}}

jobs:
  CI:
    continue-on-error: ${{ matrix.config.continue-on-error == 'true' }}
    strategy:
      matrix:
        config:
          - {dockerfile: 'fedora',   tag: 'gmxpkg'}
          - {dockerfile: 'fedora',   tag: 'rawhide',      build_args: 'TAG=rawhide,PYTHON=python3.13', continue-on-error: 'true'}
          - {dockerfile: 'ubuntu',   tag: 'latest'}
          - {dockerfile: 'ubuntu',   tag: 'intel',        build_args: 'TAG=22.04,INTEL=yes', continue-on-error: 'true'}
          - {dockerfile: 'ubuntu',   tag: 'rolling',      build_args: 'TAG=rolling'}
          - {dockerfile: 'ubuntu',   tag: 'devel',        build_args: 'TAG=devel', continue-on-error: 'true'}
          - {dockerfile: 'opensuse', tag: 'latest',       continue-on-error: 'true'}
          - {dockerfile: 'fedora',   tag: 'latest-amd64', build_args: 'GMX_BRANCH=release-2019,GMX_DOUBLE=ON'}
          - {dockerfile: 'fedora',   tag: 'latest-arm64', build_args: 'GMX_BRANCH=release-2019,GMX_DOUBLE=ON', arm: 'true'}
          - {dockerfile: 'fedora',   tag: 'gmx2019',      build_args: 'GMX_BRANCH=release-2019'}
          - {dockerfile: 'fedora',   tag: 'gmx2025_d',    build_args: 'GMX_BRANCH=release-2025,GMX_DOUBLE=ON'}
          - {dockerfile: 'fedora',   tag: 'gmx2025',      build_args: 'GMX_BRANCH=release-2025'}
          - {dockerfile: 'fedora',   tag: 'gmx9999_d',    build_args: 'GMX_BRANCH=main,GMX_DOUBLE=ON', continue-on-error: 'true'}
          - {dockerfile: 'fedora',   tag: 'gmx9999',      build_args: 'GMX_BRANCH=main', continue-on-error: 'true'}
          - {dockerfile: 'fedora',   tag: 'nogmx',        build_args: 'GMX_BRANCH=none'}
          - {dockerfile: 'actions',  tag: 'latest'}
          - {dockerfile: 'format',   tag: 'latest'}
    runs-on: ${{ matrix.config.arm == 'true' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # workaround for issue with sudo in docker-in-docker docker/build-push-action#1302
          driver: docker
      - name: Login to Gitlab Container Registry
        if: github.repository_owner == 'votca' && ( github.event_name == 'push' ||  github.event_name == 'schedule' )
        uses: docker/login-action@v3
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_REGISTRY_USERNAME }}
          password: ${{ secrets.GITLAB_REGISTRY_TOKEN }}
      - name: Login to Github Container Registry
        if: github.repository_owner == 'votca' && ( github.event_name == 'push' ||  github.event_name == 'schedule' )
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Convert build_args
        id: build_args
        run: |
          echo "args<<EOF" >> $GITHUB_OUTPUT
          echo ${{ matrix.config.build_args }} | sed 's/,/\n/g' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Build and Push Docker images for all Container Registries
        uses: docker/build-push-action@v6
        with:
          tags: |
            registry.gitlab.com/votca/buildenv/${{ matrix.config.dockerfile }}:${{ matrix.config.tag }}
            ghcr.io/votca/buildenv/${{ matrix.config.dockerfile }}:${{ matrix.config.tag }}
          file: ${{ matrix.config.dockerfile }}
          build-args: ${{ steps.build_args.outputs.args }}
          pull: true
          push: ${{ github.repository_owner == 'votca' && ( github.event_name == 'push' ||  github.event_name == 'schedule' ) }}
  merge-docker-manifest:
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: Login to Gitlab Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_REGISTRY_USERNAME }}
          password: ${{ secrets.GITLAB_REGISTRY_TOKEN }}
      - name: Login to Github Container Registry
        if: github.repository_owner == 'votca' && ( github.event_name == 'push' ||  github.event_name == 'schedule' )
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create and push manifest images to Github Container Registry
        if: github.repository_owner == 'votca' && ( github.event_name == 'push' ||  github.event_name == 'schedule' )
        uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
        with:
          inputs: ghcr.io/votca/buildenv/fedora:latest
          tags: ghcr.io/votca/buildenv/fedora:latest-amd64,ghcr.io/votca/buildenv/fedora:latest-arm64
          push: ${{ github.repository_owner == 'votca' && ( github.event_name == 'push' ||  github.event_name == 'schedule' ) }}
      - name: Create and push manifest images to GitLab Container Registry
        if: github.repository_owner == 'votca' && ( github.event_name == 'push' ||  github.event_name == 'schedule' )
        uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
        with:
          inputs: registry.gitlab.com/votca/buildenv/fedora:latest
          tags: registry.gitlab.com/votca/buildenv/fedora:latest-amd64,registry.gitlab.com/votca/buildenv/fedora:latest-arm64
          push: ${{ github.repository_owner == 'votca' && ( github.event_name == 'push' ||  github.event_name == 'schedule' ) }}
